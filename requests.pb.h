// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_requests_2eproto__INCLUDED
#define PROTOBUF_requests_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace req {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_requests_2eproto();
void protobuf_AssignDesc_requests_2eproto();
void protobuf_ShutdownFile_requests_2eproto();

class Request;
class TaggingRequest;
class NumberedRequest;

// ===================================================================

class Request : public ::google::protobuf::MessageLite {
 public:
  Request();
  virtual ~Request();
  
  Request(const Request& from);
  
  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Request& default_instance();
  void Swap(Request* other);
  
  // implements Message ----------------------------------------------
  
  Request* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Request)
 private:
  ::google::protobuf::internal::ExtensionSet _extensions_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_requests_2eproto();
  friend void protobuf_AssignDesc_requests_2eproto();
  friend void protobuf_ShutdownFile_requests_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class TaggingRequest : public ::google::protobuf::MessageLite {
 public:
  TaggingRequest();
  virtual ~TaggingRequest();
  
  TaggingRequest(const TaggingRequest& from);
  
  inline TaggingRequest& operator=(const TaggingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const TaggingRequest& default_instance();
  void Swap(TaggingRequest* other);
  
  // implements Message ----------------------------------------------
  
  TaggingRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TaggingRequest& from);
  void MergeFrom(const TaggingRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  static const int kTaggingFieldNumber = 1;
  static ::google::protobuf::internal::ExtensionIdentifier< ::req::Request,
      ::google::protobuf::internal::MessageTypeTraits< ::req::TaggingRequest >, 11, false >
    tagging;
 private:
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_requests_2eproto();
  friend void protobuf_AssignDesc_requests_2eproto();
  friend void protobuf_ShutdownFile_requests_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static TaggingRequest* default_instance_;
};
// -------------------------------------------------------------------

class NumberedRequest : public ::google::protobuf::MessageLite {
 public:
  NumberedRequest();
  virtual ~NumberedRequest();
  
  NumberedRequest(const NumberedRequest& from);
  
  inline NumberedRequest& operator=(const NumberedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const NumberedRequest& default_instance();
  void Swap(NumberedRequest* other);
  
  // implements Message ----------------------------------------------
  
  NumberedRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NumberedRequest& from);
  void MergeFrom(const NumberedRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline ::google::protobuf::int32 number() const;
  inline void set_number(::google::protobuf::int32 value);
  
  static const int kNumberedFieldNumber = 2;
  static ::google::protobuf::internal::ExtensionIdentifier< ::req::Request,
      ::google::protobuf::internal::MessageTypeTraits< ::req::NumberedRequest >, 11, false >
    numbered;
 private:
  mutable int _cached_size_;
  
  ::google::protobuf::int32 number_;
  friend void  protobuf_AddDesc_requests_2eproto();
  friend void protobuf_AssignDesc_requests_2eproto();
  friend void protobuf_ShutdownFile_requests_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NumberedRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// Request

// -------------------------------------------------------------------

// TaggingRequest

// -------------------------------------------------------------------

// NumberedRequest

// required int32 number = 1;
inline bool NumberedRequest::has_number() const {
  return _has_bit(0);
}
inline void NumberedRequest::clear_number() {
  number_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 NumberedRequest::number() const {
  return number_;
}
inline void NumberedRequest::set_number(::google::protobuf::int32 value) {
  _set_bit(0);
  number_ = value;
}


}  // namespace req
#endif  // PROTOBUF_requests_2eproto__INCLUDED
